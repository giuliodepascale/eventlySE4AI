// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        


model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
 enum UserRole {
  USER
  ORGANIZER
  ADMIN
}

enum OrganizationRole {
  ADMIN_ORGANIZZATORE
  GESTORE
}
 
model User {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  emailVerified     DateTime?           @map("email_verified")
  image             String?
  password          String?             // Opzionale perché in OAuth non abbiamo password
  role              UserRole            @default(USER)

  location          String?

  favoriteIds       String[]
  accounts          Account[]
  orders            Order[]              // Un utente ha ordini (biglietti acquistati)
  tickets           Ticket[]             // Biglietti posseduti dall'utente

  @@map("users")
  OrganizationUser OrganizationUser[]
}

model Organization {
  id                  String              @id @default(cuid())
  name                String
  description         String
  indirizzo           String?
  comune              String?             
  provincia           String?
  regione             String?  
  phone               String?
  email               String
  linkEsterno         String?
  latitudine          String?
  longitudine         String?  
  createdAt           DateTime            @default(now())
  imageSrc            String?
  seoUrl              String?
  stripeAccountId     String?              
  // Relazioni con OrganizationUser
  organizationUsers   OrganizationUser[]

  // Relazioni con Event e Reservation
  events              Event[]             @relation("OrganizationEvents")
  orders              Order[]
  @@map("organizations")
  
}
model OrganizationUser {
  userId              String
  organizationId      String
  role                OrganizationRole

  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization        Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@id([userId, organizationId])
  @@map("organization_users")
}

model VerificationToken {   //per la verifica della mail
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {   //per il reset della password
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}


model Event {
  id               String        @id @default(cuid())
  title            String
  description      String
  imageSrc         String?
  createdAt        DateTime      @default(now())
  category         String
  comune           String        
  provincia        String
  regione          String
  latitudine       String
  longitudine      String       
  noTickets        Boolean       // Non opzionale: deve essere vero o falso
  favoriteCount    Int           @default(0)
  eventDate        DateTime
  indirizzo        String
  organizationId   String
  seoUrl           String?        

  organization    Organization  @relation("OrganizationEvents", fields: [organizationId], references: [id], onDelete: Cascade)
  ticketTypes     TicketType[]
  orders          Order[]
  tickets         Ticket[]

  @@map("events")
}


model TicketType {
  id             String   @id @default(cuid())
  eventId        String
  name           String   // Nome del biglietto (Es. "VIP", "Early Bird")
  description    String?  // Opzionale, dettagli sul biglietto
  price          Int?     // Prezzo in centesimi (null se gratuito)
  quantity       Int      // Numero di biglietti disponibili
  sold           Int      @default(0) // Biglietti già venduti
  maxPerUser     Int?     // Numero massimo di biglietti acquistabili per utente
  isActive       Boolean  @default(true) // Se falso, il biglietto non può essere acquistato
  createdAt      DateTime @default(now())

  event          Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tickets        Ticket[]

  @@map("ticket_types")
}



model Order {
  id             String     @id @default(cuid())
  userId         String
  eventId        String
  totalPrice     Int
  status         String
  paymentIntent  String?
  ticketCount    Int
  createdAt      DateTime   @default(now())
  
  // Aggiungi questi due campi per creare la relazione con Organization
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  event          Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tickets        Ticket[]

  @@map("orders")
}


model Ticket {
  id             String     @id @default(cuid()) // ID del biglietto
  orderId        String?
  eventId        String
  userId         String
  ticketTypeId   String
  qrCode         String     @unique // Identificativo univoco per il QR code
  isValid        Boolean    @default(true) // Se falso, il biglietto non può essere usato
  usedAt         DateTime?  // Quando il biglietto è stato validato
  seatNumber     String?    // (Opzionale) Numero del posto, se implementato in futuro
  createdAt      DateTime   @default(now())

  order          Order?     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  event          Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  ticketType     TicketType @relation(fields: [ticketTypeId], references: [id], onDelete: Cascade)

  @@map("tickets")
}

