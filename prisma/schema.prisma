// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        


model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
 enum UserRole {
  USER
  ORGANIZER
  ADMIN
}

enum OrganizationRole {
  ADMIN_ORGANIZZATORE
  GESTORE
}
 
model User {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  emailVerified     DateTime?           @map("email_verified")
  image             String?
  password          String?             // Opzionale perch√© in OAuth non abbiamo password
  role              UserRole            @default(USER)

  location          String?

  favoriteIds       String[]
  accounts          Account[]
  reservations      Reservation[]
  organizationUsers OrganizationUser[]

  @@map("users")
}

model Organization {
  id                  String              @id @default(cuid())
  name                String
  description         String
  indirizzo           String?
  comune              String?             // Aggiunto campo comune
  provincia           String?
  regione             String?  
  phone               String?
  email               String?
  linkEsterno         String?
  linkMaps            String?
  createdAt           DateTime            @default(now())
  imageSrc            String?
  seoUrl              String?              
  // Relazioni con OrganizationUser
  organizationUsers   OrganizationUser[]

  // Relazioni con Event e Reservation
  events              Event[]             @relation("OrganizationEvents")
  reservations        Reservation[]       @relation("OrganizationReservations")

  @@map("organizations")
}
model OrganizationUser {
  userId              String
  organizationId      String
  role                OrganizationRole

  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization        Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@id([userId, organizationId])
  @@map("organization_users")
}

model VerificationToken {   //per la verifica della mail
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {   //per il reset della password
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}


model Event {
  id               String        @id @default(cuid())
  title            String
  description      String
  imageSrc         String?
  createdAt        DateTime      @default(now())
  category         String
  price            Int?
  comune           String        
  provincia        String       
  linkMaps         String?
  isFree           Boolean?
  favoriteCount    Int           @default(0)
  eventDate        DateTime
  indirizzo        String
  organizationId   String
  seoUrl           String        @unique
  
  organization     Organization  @relation("OrganizationEvents", fields: [organizationId], references: [id], onDelete: Cascade)
  reservations     Reservation[]

  @@map("events")
}

model Reservation {
  id              String          @id @default(cuid())
  userId          String 
  eventId         String 
  organizationId  String
  totalPrice      Int
  createdAt       DateTime        @default(now())

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  event           Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  organization    Organization    @relation("OrganizationReservations", fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("reservations")
}