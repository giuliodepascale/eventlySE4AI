generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ORGANIZER
  ADMIN
}

enum OrganizationRole {
  ADMIN_ORGANIZZATORE
  GESTORE
}

enum manualStatus {
  ACTIVE
  HIDDEN
  CANCELED
}

model User {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String?             @unique
  emailVerified     DateTime?           @map("email_verified")
  image             String?
  password          String
  role              UserRole            @default(USER)
  regione           String?
  location          String?
  favoriteIds       String[]
  tickets           Ticket[]
  prenotazioni      Prenotazione[]
  organizationUsers OrganizationUser[]

  @@map("users")
}

model Organization {
  id                  String              @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  description         String
  indirizzo           String?
  comune              String?
  provincia           String?
  regione             String?
  phone               String?
  email               String
  linkEsterno         String?
  latitudine          String?
  longitudine         String?
  createdAt           DateTime            @default(now())
  imageSrc            String?
  seoUrl              String?
  stripeAccountId     String?
  ticketingStatus     String              @default("no_stripe")
  organizationUsers   OrganizationUser[]
  events              Event[]

  @@map("organizations")
}

model OrganizationUser {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  userId            String             @db.ObjectId
  organizationId    String             @db.ObjectId
  role              OrganizationRole

  user              User               @relation(fields: [userId], references: [id])
  organization      Organization       @relation(fields: [organizationId], references: [id])

  @@map("organization_users")
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Event {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  title               String
  description         String
  imageSrc            String?
  createdAt           DateTime      @default(now())
  category            String
  comune              String
  provincia           String
  regione             String
  latitudine          String
  longitudine         String
  favoriteCount       Int           @default(0)
  eventDate           DateTime
  indirizzo           String
  organizationId      String        @db.ObjectId
  seoUrl              String?
  status              manualStatus
  isReservationActive Boolean

  organization        Organization  @relation(fields: [organizationId], references: [id])
  ticketTypes         TicketType[]
  tickets             Ticket[]
  prenotazioni        Prenotazione[]

  @@map("events")
}

model TicketType {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  eventId        String     @db.ObjectId
  name           String
  description    String?
  price          Int
  quantity       Int
  sold           Int        @default(0)
  maxPerUser     Int?
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())

  event          Event      @relation(fields: [eventId], references: [id])
  tickets        Ticket[]

  @@map("ticket_types")
}

model Ticket {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  eventId         String     @db.ObjectId
  userId          String     @db.ObjectId
  ticketTypeId    String     @db.ObjectId
  qrCode          String     @unique
  isValid         Boolean    @default(true)
  usedAt          DateTime?
  createdAt       DateTime   @default(now())
  paymentStripeId String     @unique
  methodPaymentId String     @unique
  paid            Int

  event           Event      @relation(fields: [eventId], references: [id])
  user            User       @relation(fields: [userId], references: [id])
  ticketType      TicketType @relation(fields: [ticketTypeId], references: [id])

  @@map("tickets")
}

model Prenotazione {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  eventId    String   @db.ObjectId
  userId     String   @db.ObjectId
  reservedAt DateTime @default(now())
  qrCode     String   @unique

  event      Event    @relation(fields: [eventId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@map("prenotazioni")
}

model PushToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?  @db.ObjectId
  deviceId  String   @unique
  token     String   @unique
  lastSeen  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
